from __future__ import absolute_import, division, print_function, unicode_literals

import inspect
import pkgutil
import sys
import argparse

from .added_command import AddedCommand
from ..dss import autogenerated, composite_commands


class CLI:
    """Class for interacting with users through a CLI."""

    def __init__(self):
        """Initialize the CLI API."""
        self.parser = argparse.ArgumentParser()  # Need to add description based on spec.
        subparsers = self.parser.add_subparsers(help='sub-command help')
        prefix = autogenerated.__name__ + "."
        for importer, modname, _ in pkgutil.iter_modules(autogenerated.__path__, prefix):
            self._add_parsers(importer, modname, subparsers)

        prefix = composite_commands.__name__ + "."
        for importer, modname, _ in pkgutil.iter_modules(composite_commands.__path__, prefix):
            self._add_parsers(importer, modname, subparsers)

    def _add_parsers(self, importer, modname, subparsers):
        module = importer.find_module(modname).load_module(modname)
        clsmembers = inspect.getmembers(module, inspect.isclass)

        command_class = None
        for class_ in clsmembers:
            if class_[0] != AddedCommand.__name__:
                command_class = class_[1]

        command_class.add_parser(subparsers)

    def parse_args(self, command_line_input):
        """Parse the input arguments into a map from parameter name -> value."""
        args = self.parser.parse_args(command_line_input)
        command_func = args.func
        del args.func
        args = {k: v for k, v in vars(args).items() if v is not None}
        return command_func, args

    def make_request(self, command_line_input, stream=False):
        """Function to actually make request to DSS."""
        if not command_line_input:
            return self.parser.format_help()
        command_func, args = self.parse_args(command_line_input)
        return command_func(args)


if __name__ == "__main__":
    cli = CLI()
    response = cli.make_request(sys.argv[1:])
    if response:
        print(response.headers)
        print(response.content)
